"""Updated course table

Revision ID: b0383b11b97c
Revises: c0260abfce34
Create Date: 2025-08-30 12:29:58.417858

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'b0383b11b97c'
down_revision: Union[str, Sequence[str], None] = 'c0260abfce34'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""

    conn = op.get_bind()
    inspector = sa.inspect(conn)

    # Drop indexes and tables only if they exist
    if 'courses' in inspector.get_table_names():
        existing_indexes = [idx['name'] for idx in inspector.get_indexes('courses')]
        if 'ix_courses_id' in existing_indexes:
            op.drop_index('ix_courses_id', table_name='courses')
        if 'title' in existing_indexes:
            op.drop_index('title', table_name='courses')
        op.drop_table('courses')

    if 'users' in inspector.get_table_names():
        existing_indexes = [idx['name'] for idx in inspector.get_indexes('users')]
        if 'ix_users_email' in existing_indexes:
            op.drop_index('ix_users_email', table_name='users')
        if 'ix_users_id' in existing_indexes:
            op.drop_index('ix_users_id', table_name='users')
        op.drop_table('users')

    if 'roles' in inspector.get_table_names():
        existing_indexes = [idx['name'] for idx in inspector.get_indexes('roles')]
        if 'ix_roles_id' in existing_indexes:
            op.drop_index('ix_roles_id', table_name='roles')
        if 'name' in existing_indexes:
            op.drop_index('name', table_name='roles')
        op.drop_table('roles')



def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', mysql.VARCHAR(length=100), nullable=False),
    sa.Column('email', mysql.VARCHAR(length=100), nullable=False),
    sa.Column('hashed_password', mysql.VARCHAR(length=200), nullable=False),
    sa.Column('role_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', mysql.DATETIME(), server_default=sa.text('(now())'), nullable=True),
    sa.Column('updated_at', mysql.DATETIME(), nullable=True),
    sa.Column('inactive', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('users_ibfk_1')),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('courses',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', mysql.VARCHAR(length=150), nullable=False),
    sa.Column('instructor', mysql.VARCHAR(length=100), nullable=False),
    sa.Column('level', mysql.VARCHAR(length=50), nullable=False),
    sa.Column('duration', mysql.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price', mysql.FLOAT(), nullable=True),
    sa.Column('created_at', mysql.DATETIME(), server_default=sa.text('(now())'), nullable=True),
    sa.Column('updated_at', mysql.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index(op.f('title'), 'courses', ['title'], unique=True)
    op.create_index(op.f('ix_courses_id'), 'courses', ['id'], unique=False)
    op.create_table('roles',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', mysql.VARCHAR(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index(op.f('name'), 'roles', ['name'], unique=True)
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    # ### end Alembic commands ###
